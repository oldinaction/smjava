<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-2.5.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">
	
	<context:annotation-config/>
	<context:component-scan base-package="cn.aezo"></context:component-scan>
	
	<!-- 配置数据库信息的config的bean -->
	<bean id="config" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>
	
	<!-- 数据源的bean(实例化时根据上面数据库config的bean的信息进行注入)，如果实例化后则已经可以和数据库进行交互 -->
	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- 将数据源myDataSource注入到hibernate的SessionFactory中(使用的是Spring包装后的Hibernate)。class为AnnotationSessionFactoryBean -->
	<bean id="mySessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" />
		<!-- annotation方式的映射。name不能瞎写，因为AnnotationSessionFactoryBean有setAnnotatedClasses等方法将参数进行注入-->
		<property name="packagesToScan"><!-- 使用packagesToScan则只需要写包，annotatedClasses就要写全所有的类 -->
			<list>
				<value>cn.aezo.sh.model</value>
			</list>
		</property>
		<!--xml方式的映射  
		<property name="mappingResources">
			<list>
				<value>user.hbm.xml</value>
			</list>
		</property>
		-->
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
			<!--也可使用value进行赋值
			<value>hibernate.dialect=org.hibernate.dialect.MySQLDialect</value>
			-->
		</property>
	</bean>
	
	<!-- 将mySessionFactory再包一层，变成HibernateTransactionManager的一个bean -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="mySessionFactory" />
	</bean>
	
	<!-- annotation方式进行声明事物(不建议)。将sessionFactory交给txManager管理，使用annotation-driven驱动(在内部实现aop)。 -->
	<!-- <tx:annotation-driven transaction-manager="txManager"/> -->
	
	<!-- xml方式声明事物(常用) -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" read-only="false"/><!-- read-only默认是false,表示该transaction可读可写 -->
		</tx:attributes>
	</tx:advice>
	<!-- 定义一个切面，执行transaction时使用上面的advice -->
	<aop:config>
		<aop:pointcut id="bussinessService" expression="execution(* cn.aezo.sh.service..*.*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="bussinessService"/>
	</aop:config>
	
	
	<!-- 将mySessionFactory再包一层，变成HibernateTemplate的一个bean(他会自动帮我们处理异常) -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="mySessionFactory"></property>
	</bean>
	
	
	

</beans>